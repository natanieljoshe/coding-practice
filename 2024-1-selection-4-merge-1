package com.program;

import java.util.Arrays;


//DIBUAT BERDASARKAN YOUTUBE CHANNEL, STUDY WITH STUDENT
public class App {
    public static void main(String[] args) throws Exception {
         
        int[] nilai = {66,43,90};
        mergeSortInt(nilai);
    }

    public static void mergeSortInt (int[] bilangan){

        //display sebelum
        System.out.println("==sebelum==");
        for(int b:bilangan){
            System.out.print(b+ " ");
        }

        //logic-1
        bilangan = pisahInt(bilangan);


        //display sesudah
        System.out.println("\n==sesudah==");
        for(int b:bilangan){
            System.out.print(b+" ");
        }

    }

    //fuction pisahInt
    public static int [] pisahInt(int[] bilangan){
        //kalau datanya sudah menjadi satuan & untuk keluar dari recursive
        if(bilangan.length<=1){
            return bilangan;
        }

        //membuat array kosong
        //=========PEMISAHAN=========
        int nilaiTengah = bilangan.length/2;
        int[] kiri = new int[nilaiTengah];
        int[] kanan;

        //cek apakah data array ganjil atau genap
        //jika genap
        if(bilangan.length%2 == 0){
            kanan = new int[nilaiTengah];
        }
        //jika ganjil
        else{
            //apabila ganjil, jumlah data di array kanan pasti lebih banyak
            //(awalnya lebih banyak)
            kanan = new int[nilaiTengah + 1];
        }

        //mengisi array
        //isi array kiri
        for(int i=0;i<kiri.length;i++){
            //contoh: mengambil index ke-0 hingga index ke-3
            kiri[i] = bilangan[i];
        }

        //isi array kanan
        for(int i=0;i<kanan.length;i++){
            //contoh: apabila kiri ambil sampai index ke-3,
            //maka, yang kanan mengambil index ke-4 hingga habis 
            kanan[i]=bilangan[nilaiTengah+1];
        }

        //pemanggilan fungsi untuk memisah sisi kanan dan kiri lagi
        kiri = pisahInt(kiri);
        kanan = pisahInt(kanan);


        
        //=========PENGGABUNGAN=========
        //menyiapkan array untuk menampung pengembalian array dari fungsi gabung
        int hasil[]= new int[bilangan.length];

        //isi array, hasil dari data yang sudah digabung
        hasil = gabungInt(kiri, kanan);

        //kembalikan array hasil
        return hasil;

    }

    //fuction gabungInt

    public static int[] gabungInt(int[] kiri, int[] kanan){
        //menyiapkan array kosong yang nantinya akan diisi data dari sisi kiri dan kanan
        //yang sudah diurutkan
        int [] hasilGabung = new int [kiri.length + kanan.length];

        //menyiapkan penanda indexKiri, indexKanan dan indexHasilGabung
        int indexKiri =0, indexKanan=0, indexHasilGabung=0;

        //perulangan untuk mengisi array hasilGabung
        while (indexKiri<kiri.length || indexKanan< kanan.length) {
            
            //cek apakah sisi kiri dan kanan masih ada/belum dibandingkan
            if(indexKiri < kiri.length && indexKanan < kanan.length){   
                //kalau data yang kiri lebih kecil dari data yang kanan
                if(kiri[indexKiri]<kanan[indexKanan]){
                    hasilGabung[indexHasilGabung] = kiri[indexKiri];
                    indexHasilGabung++;
                    indexKiri++;
                }else{
                    hasilGabung[indexHasilGabung] = kanan[indexKanan];
                    indexHasilGabung++;
                    indexKanan++;
                }
            }


            else if(indexKiri<kiri.length){
                //kalau hanya sisi kiri saja yang masih tersedia
                hasilGabung[indexHasilGabung] = kiri[indexKiri];
                indexHasilGabung++;
                indexKiri++;
            }else if(indexKanan<kanan.length){
                //kalau hanya sisi kanan yang masih tersedia
                hasilGabung[indexHasilGabung]= kanan[indexKanan];
                indexHasilGabung++;
                indexKanan++;
            }

        }
        //akhir while

        //kembalikan nilai array gabung
        return hasilGabung;
    }

}

    
